<launch>
	<arg name="wall_cam_name" default="wall_cam"/>
	<arg name="face_cam_name" default="face_cam"/>

	<!-- Kinect camera frames -->
	<node
		name="tripod_to_face_cam_frame"
		pkg="reconfigurable_transform_publisher"
		type="reconfigurable_transform_publisher.py"
		args="0.1 -0.05 0 0 0 0 tripod_link face_cam
		_link 10"/>
	<node
		name="tripod_to_wall_cam_frame"
		pkg="reconfigurable_transform_publisher"
		type="reconfigurable_transform_publisher.py"
		args="0 0.1 0.05 -2.9531 0 0 tripod_link $(arg wall_cam_name)_link 10"
	/>

	<!-- Kinect cameras -->
	<include file="$(find openni_launch)/launch/openni.launch">
		<arg name="camera" value="$(arg face_cam_name)"/>
		<arg name="device_id" value="A00362A15947039A"/>
		<arg name="respawn" value="true"/>
	</include>

	<include file="$(find openni_launch)/launch/openni.launch">
		<arg name="camera" value="$(arg wall_cam_name)"/>
		<arg name="device_id" value="A00362A15947039A"/> 
		<param name="respawn" value="true"/>
	</include>

	<!-- Head pose estimation -->
	<include file="$(find head_pose_estimation)/launch/estimator.launch">
		<arg name="filter_pose" value="false"/>
		<arg name="camera" value="$(arg face_cam_name)"/>
	</include>

	<!-- Table/wall detection + Object segmentation -->
	<include file="$(find projector_interface)/launch/tabletop_segmentation_overhead_kinect.launch">
		<arg name="tabletop_segmentation_points_in" value="/$(arg wall_cam_name)/depth_registered/points"/>
	</include>
	<node pkg="projector_interface" name="find_objects" type="find_objects.py"/>

	<!-- Interface -->
	<include file="$(find projector_interface)/launch/calibrate_and_circle.launch">
	 	<arg name="calibration_camera" value="/$(arg wall_cam_name)/rgb"/>
	</include>
</launch>