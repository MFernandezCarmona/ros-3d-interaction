<launch>
  <arg name="overhead" value="false"/>
  <arg name="tabletop_segmentation_points_in" default="laser_cloud_converted"/>
  <!--group if="$(arg overhead)">
    <include file="$(find openni_launch)/launch/openni.launch">
      <arg name="camera" value="overhead_kinect"/>
    </include>
  </group-->

  <arg name="recog_cloud" if="$(arg overhead)" value="/overhead_kinect/depth/points"/>
  <!--arg name="recog_cloud" unless="$(arg overhead)" value="narrow_stereo_textured/points2"/-->
  <!--arg name="recog_cloud" unless="$(arg overhead)" value="wide_stereo_textured/points2"/-->
  <arg name="recog_cloud" unless="$(arg overhead)" value="laser_cloud_converted"/>

  <include file="$(find external_camera_localizer)/launch/cloud_registration.launch">
    <arg name="fixed_frame" value="base_link"/>
  </include>

  <include file="$(find projector_interface)/launch/pr2_tabletop_manipulation.launch">
    <!--arg name="tabletop_segmentation_points_in" value="laser_cloud_converted"/-->  
    <arg name="tabletop_segmentation_points_in" value="$(arg tabletop_segmentation_points_in)"/>  
  </include>
  <node pkg="projector_interface" type="find_objects.py" name="find_objects"/>
  
  <!-- <node pkg="dynamic_reconfigure" name="dynparam" args="set /camera_synchronizer_node projector_mode 1"/> -->
  <!--
  rosrun dynamic_reconfigure dynparam set /camera_synchronizer_node projector_mode 1
  in rosh: detection = services.tabletop_segmentation()
  -->

</launch>
